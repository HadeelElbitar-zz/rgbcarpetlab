<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAACAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgIAgmJiYUKCgoEwAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAuLi44Ly8vji8vL8QvLy/oMDAw+zAwMP4wMDD+MDAw+TAwMOQvLy+9Li4uhC8v
        LysAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAtLS1hLy8v0zAwMP8xMTH/MTEx/zExMf8xMTH/MTEx/zExMf8xMTH/MTEx/zEx
        Mf8xMTH/MDAw/i8vL8UtLS1PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAApKSksLy8vzjExMf8xMTH/MTEx/zExMf8xMTH/MTEx/zExMf8xMTH/MTEx/zEx
        Mf8xMTH/MTEx/zExMf8xMTH/MTEx/zExMf8uLi64KSkpGQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAALCwsVjAwMP4xMTH/MTEx/zExMf8xMTH/MTEx/zExMf80NTX/e3oz/5SQ
        LP9NTjb/MDAw/zExMf8xMTH/MTEx/zExMf8xMTH/MTEx/zExMf8vLy/3KioqPAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0tLVswMDD/MTEx/zExMf8xMTH/MTEx/zExMf8xMTH/MTEx/2hq
        Pf/+6gD//ukA/8vBHP8xMjL/MTEx/zExMf8xMTH/MjMz/zEyMv8xMTH/MTEx/zExMf8wMDD+LS0tPgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsLCw6MDAw/zExMf8xMTH/NDQ0/2EzM/9fMTH/MzIy/zEx
        Mf8xMTH/P0E+/7yxHP/bzBL/goAx/zExMf8xMTH/MTEx/zdtPf8Z2x3/IsEm/zM5Nv8xMTH/MTEx/zEx
        Mf8wMDD7LS0tIgAAAAAAAAAAAAAAAAAAAAAAAAAAJycnDS8vL+wxMTH/MTEx/zExMf+HQED//gAA//4A
        AP+MPDz/MDAw/zExMf8xMTH/MTEx/zExMf8xMTH/MTEx/zExMf8xMTH/KaYw/wH1Af8E8AX/QVhJ/zEx
        Mf8xMTH/MTEx/zExMf8vLy/MAAAABAAAAAAAAAAAAAAAAAAAAAAtLS1wMTEx/zExMf8xMTH/MTEx/4w4
        OP/9AAD//gAA/484OP8wMDD/MTEx/zExMf8xMTH/MTEx/zExMf8xMTH/MTEx/zExMf8zMzP/QklJ/z5E
        RP8xMTH/MTEx/zExMf8xMTH/MTEx/zExMf8uLi5OAAAAAAAAAAAAAAAAAAAABi8vL/ExMTH/MTEx/zEx
        Mf8xMTH/MTEx/1RJSf9RR0f/MjIy/zExMf8xMTH/MTEx/zExMf8xMTH/MTEx/zExMf8xMTH/MTEx/zEx
        Mf8xMTH/MTEx/zExMf8xMTH/MTEx/zExMf8xMTH/MTEx/y8vL80AAAAAAAAAAAAAAAAtLS0/MTEx/zEx
        Mf8xMTH/MTEx/zExMf8xMTH/MTEx/ysrK/8vLy//Ly8v/y8vL/8wMDD/Ly8v/y8vL/8vLy//Jycn/ysr
        K/8wMDD/Ly8v/y8vL/8vLy//MDAw/zExMf8xMTH/MTEx/zExMf8xMTH/MDAw/ywsLCMAAAAAAAAAAi0t
        LXAxMTH/MTEx/zQ1Nf9zTGT/P0VF/zExMf8xMTH/IyMj/yoqKv8uLi7/Li4u/y4uLv83Nzf/MTEx/y4u
        Lv8vLy//KSkp/yIiIv8mJib/FxcX/x8fH/8xMTH/QklJ/ymoqf9AYGH/MDAw/zExMf8xMTH/LCwsUQAA
        AAAnJycNLy8vlDExMf8zNDT/ziF5//4Aff/0BXv/OT8//zExMf8wMDD/OTk5/zIyMv9ISEj/QUFB/1JS
        Uv9HR0f/QEBA/xsbG/8sLCz/KSkp/ysrK/8TExP/FxcX/zEyMv8F7vH/APv+/wH5/P80QUH/MTEx/zEx
        Mf8vLy9tAAAAACgoKBMvLy+hMDAw/zM0NP++IHD//gB9//gDe/88QkL/MDAw/zAwMP8mJib/Ly9B/ysr
        R/8qSyr/QD0p/2UlJf80MjL/LCws/y0tLf8wMDD/MDAw/ykpKf8wMDD/MTEx/z1rbP8Rz9H/NIOE/zIz
        M/8xMTH/MTEx/y8vL3gAAAAAIiIiDy4uLo8wMDD/MTEx/z03O/9mN1D/VjlJ/zExMf8xMTH/MDAw/yQk
        JP8oKFT/I0lI/yZTJv8yPir/cyIi/0csLP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MTEx/zU1
        Nf8xMTH/MTEx/zExMf8xMTH/Li4uaQAAAAAAAAAELS0tZjExMf8wMDD/MTEx/zExMf8xMTH/MTEx/zEx
        Mf8wMDD/JCQk/ykpUP8rLkP/K0cr/z06Kv9gJyf/MTAw/zAwMP8wMDD/MDAw/zAwMP8wMDD/MDAw/zAw
        MP8xMTH/MTEx/zExMf8xMTH/MTEx/zExMf8uLi5IAAAAAAAAAAAuLi4yMTEx/zAwMP8xMTH/MTIy/z1C
        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
        wD/+AAB//4AB///wD/////////////////8=
</value>
  </data>
</root>